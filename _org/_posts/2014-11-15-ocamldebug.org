#+STARTUP: showall
#+OPTIONS: toc:nil
#+OPTIONS: ^:nil
#+BEGIN_HTML
---
layout: post
title: "ocamldebug"
date:   2014-11-15 21:00:00
categories: ocaml
---
#+END_HTML

When I first read about the time-travel feature of the ocaml debugger
I was very intrigued but never got around to trying it out in practice at
work. This weekend I decided to give it a go.

*Note:* Getting the debugger configured correctly was a bit of a hurdle and
there are still a couple of problems that I'm hoping to
resolve. Until I get these things sorted out this blog post is used
as a way to describe my setup so I can get help from some of the more
seasoned OCaml programmers out there. Once I have everything sorted
out I'll re-write this post into a proper guide as I did with my [[http://mads379.github.io/ocaml/2014/01/05/using-utop-in-emacs.html][utop
post]].

I decided to try out the debugger on the [[https://github.com/mirage/ocaml-cohttp/blob/master/examples/async/hello_world.ml][hello world example]] of
[[https://github.com/mirage/ocaml-cohttp][ocaml-cohttp]] to get a simple but non-trivial program (in terms of
setup, i.e. a program that requires OPAM packages to compile).

For the debugger to work properly on this example you need to make
sure that your opam packages are compiled using the ~-g~ option. You
can do this by setting ~OCAMLPARAM~ to ~_,g~ before running ~opam
install~. You will want to run ~opam reinstall~ on any package you
have previously installed to make sure they get recompiled.

The second thing you need to do is tell ~ocamldebug~ where to look for
your compiled files. Unfortunately this is not as easy as it is with
utop. Luckily I came across this stack overflow [[http://stackoverflow.com/questions/6218990/how-can-ocamldebug-be-used-with-a-batteries-included-project][thread]] which explains
how to do it. I ended up using a slightly different approach as you
can't pass arguments to ~ocamldebug~ when running it from within Emacs
(at least I couldn't get it to work). I decided to write the results
of ~ocamlfind query -recursive core async cohttp cohttp.async~ into a
file named ~.ocamldebug~ and prefix each line with ~directory~. After
having started the debugger in Emacs I ran ~source <PATH>~ to
configure it.

I sat a breakpoint a line 6 of this [[https://github.com/mads379/ocaml-utop-emacs-example/blob/master/src/server.ml#L6][file]] and wrote ~run~ in the
ocamldebug buffer. I executed a request to
~http://localhost:8080/test?hello=xyz%27~ and successfully hit the
breakpoint. I was able to inspect the value of ~req~ using ~C-x C-a
C-p~ but as soon as I wrote ~step~ in the debugger I got the following
error.

#+BEGIN_HTML
<pre>(ocd) step
Time: 1084742 - pc: 4416712 - module Cohttp.Request
No source file for Cohttp.Request.</pre>
#+END_HTML

Any idea why I would be able to find the other modules of ~cohttp~ but
not this one?

* Wish List

- Is it possible to execute arbitrary OCaml code using the scope of
  the current breakpoint?
